#########################################
# Stage 1: Development (“dev”)
#########################################
ARG ROS_DISTRO=kilted
FROM osrf/ros:${ROS_DISTRO}-desktop-full-noble AS dev
#osrf/ros@sha256:923b7b953ada90a90535a211af71273a6b674d0098b1c0adc8e72962f48cd8c4

ARG USERNAME=user
ARG USER_UID=1000
ARG USER_GID=$USER_UID

ENV DEBIAN_FRONTEND=noninteractive \
    LANG=en_US.UTF-8 LC_ALL=en_US.UTF-8 \
    COLCON_HOME=/home/${USERNAME}/.colcon \
    ROS_DOMAIN_ID=42 \
    ROS_AUTOMATIC_DISCOVERY_RANGE=LOCALHOST \
    SHELL=/bin/bash \
    ROS_DISTRO=${ROS_DISTRO} \
    PYTHONUNBUFFERED=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    PIP_NO_CACHE_DIR=1 \
    PATH="/opt/venv/bin:${PATH}"

# Base OS deps (GLVND for graphics passthrough)
RUN apt-get update && apt-get install -y \
      python3-venv python3-pip python3-dev build-essential \
      git curl gnupg lsb-release ca-certificates software-properties-common \
      htop less nano rsync sudo tmux tree xclip \
      libglvnd0 libgl1 libglx0 libegl1 \
      libx11-6 libxext6 libxrender1 libxrandr2 libxi6 mesa-utils \
  && rm -rf /var/lib/apt/lists/*

# ROS2 building repo and desktop tools
RUN curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key \
      -o /usr/share/keyrings/ros-archive-keyring.gpg && \
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://repo.ros2.org/ubuntu/building noble main" \
      > /etc/apt/sources.list.d/ros2-building.list && \
    apt-get update && apt-get install -y \
      'ros-kilted-rviz*' \
      ros-kilted-rqt-gui ros-kilted-rqt-gui-py ros-kilted-rqt-graph ros-kilted-rqt-tf-tree \
      ros-kilted-nav2-bringup \
  && rm -rf /var/lib/apt/lists/*

# Always-on env for every shell
RUN printf 'source /opt/ros/%s/setup.bash\n' "${ROS_DISTRO}" > /etc/profile.d/10-ros.sh && \
    printf 'VIRTUAL_ENV=/opt/venv\nPATH=/opt/venv/bin:$PATH\nexport VIRTUAL_ENV PATH\n' > /etc/profile.d/20-venv.sh

# Prepare empty venv dir owned by user, then switch user BEFORE venv/pip
RUN install -d -o ${USERNAME} -g ${USER_GID} /opt/venv
USER ${USERNAME}

# Create venv and upgrade pip AS THE USER
RUN python3 -m venv /opt/venv && /opt/venv/bin/python -m pip install -U pip

# Python deps (single layer)
RUN /opt/venv/bin/pip install --no-cache-dir \
    ultralytics torch torchvision opencv-python-headless pyyaml tqdm \
    "git+https://github.com/openai/CLIP.git" open-clip-torch

# rosdep as root, then back
USER root
RUN rosdep init || true && rosdep update
USER ${USERNAME}

WORKDIR /home/${USERNAME}
CMD ["/bin/bash","-lc","source /etc/profile && exec bash"]

#########################################
# Stage 2: Builder (“builder”)
#########################################
FROM dev AS builder
USER root
WORKDIR /home/ws/ros_ws
COPY --chown=${USERNAME}:${USERNAME} src/ src/
RUN apt-get update && rosdep update && \
    rosdep install --from-paths src --ignore-src -r -y && \
    colcon build --cmake-args -DCMAKE_BUILD_TYPE=Release

#########################################
# Stage 3: Runtime (“runtime”)
#########################################
FROM osrf/ros:${ROS_DISTRO}-ros-base-noble AS runtime
ENV ROS_DOMAIN_ID=42 ROS_AUTOMATIC_DISCOVERY_RANGE=LOCALHOST \
    LANG=en_US.UTF-8 LC_ALL=en_US.UTF-8 \
    PATH="/opt/venv/bin:${PATH}"

# App install + Python venv
COPY --from=builder /home/ws/ros_ws/install /opt/ros_ws
COPY --from=dev /opt/venv /opt/venv

# Default user optional (comment out to stay root)
# ARG USERNAME=user
# RUN useradd -m ${USERNAME} && echo "${USERNAME} ALL=(root) NOPASSWD:ALL" > /etc/sudoers.d/${USERNAME} && chmod 0440 /etc/sudoers.d/${USERNAME}
# USER ${USERNAME}
# WORKDIR /home/${USERNAME}

CMD ["/bin/bash"]
